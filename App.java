/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.luence.app;

import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.queryparser.classic.ParseException;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.similarities.BooleanSimilarity;
import org.apache.lucene.search.similarities.BM25Similarity;
import org.apache.lucene.search.similarities.ClassicSimilarity;
import org.apache.lucene.search.similarities.TFIDFSimilarity;
//import org.apache.lucene.search.similarities.TF;
import org.apache.lucene.search.similarities.Similarity;
import org.apache.lucene.store.ByteBuffersDirectory;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.NIOFSDirectory;

import java.io.FileWriter;
import java.io.IOException;
import java.io.File;
import java.nio.file.Paths;
import java.util.*;
import java.io.FileNotFoundException;

/**
 * refer to <a href="https://www.lucenetutorial.com/lucene-in-5-minutes.html"/>
 */

// change folders for each metric
    // index on disk
    // rank is the list of hits with the highest score first
public class App {
//    public static int documents = 0;
//    private static CustomTFIDFSimilarity similarity = new CustomTFIDFSimilarity();
    private static void addDoc(IndexWriter w, String docid, String title, String descr) throws IOException {
        Document doc = new Document();
//        doc.add(new TextField("title", title, Field.Store.YES));
//        doc.add(new StringField("isbn", isbn, Field.Store.YES));
        doc.add(new StringField("doc id", docid, Field.Store.YES));
        doc.add(new TextField("title", title, Field.Store.YES));
        doc.add(new TextField("description", descr, Field.Store.YES));
        w.addDocument(doc);
//        documents++;
    }

//    static String GetNextDocument() {
//        try {
//            File myObj = new File("/Users/annsophieabrahamsson/Desktop/Grad School 2022-2023/Spring 2023/CSE 272/Assignment1/CSE272_UCSC_Spring/HW1/java/app/src/main/java/com/luence/app/ohsumed.88-91");
//            Scanner myReader = new Scanner(myObj);
//
////            int queryID = 0;
//            documentIDFound = false;
//            while (myReader.hasNextLine()) {
//                String data = myReader.nextLine();
//                if (documentIDFound) {
//
//                }
//                if (data.equals(".U")) {
//                    documentIDFound = true;
//                }
//            }
//            myReader.close();
//        } catch (FileNotFoundException e) {
//            System.out.println("An error occurred.");
//            e.printStackTrace();
//        }
//    }
    static Directory index(StandardAnalyzer analyzer)  throws IOException {
        Directory index = new ByteBuffersDirectory();
//        Directory index = new NIOFSDirectory(Paths.get("<your file index location>"));
        IndexWriterConfig config = new IndexWriterConfig(analyzer);
//        Similarity similarity;
        //config.setSimilarity(similarity);
        // config set similarity
//        config.getSimilarity(new Similarity());
        try (IndexWriter w = new IndexWriter(index, config)) {
//            IndexWriter w = new IndexWriter(index, config);
            try {
                File myObj = new File("/Users/annsophieabrahamsson/Desktop/Grad School 2022-2023/Spring 2023/CSE 272/Assignment1/CSE272_UCSC_Spring/HW1/java/app/src/main/java/com/luence/app/ohsumed.88-91");
                Scanner myReader = new Scanner(myObj);

    //            int queryID = 0;
                String documentInfo[] = new String[3];
                boolean documentIDFound = false;
                boolean documentTitleFound = false;
                boolean documentDescriptionFound = false;
                boolean currentDocumentWork = false;
//                boolean documentDescriptionFirstLineProc = false;

                while (myReader.hasNextLine()) {
                    String data = myReader.nextLine();
                    if (documentIDFound) {
                        if (currentDocumentWork) {
                            // document did not find a description
                            documentInfo[2] = "";
//                            System.out.println(documentInfo[0]);
//                            System.out.println(documentInfo[1]);
//                            System.out.println(documentInfo[2]);
                            addDoc(w, documentInfo[0], documentInfo[1], documentInfo[2]);
                        }
                        documentInfo[0] = data;
                        documentIDFound = false;
                        currentDocumentWork = true;
                    }
                    if (documentTitleFound) {
                        documentInfo[1] = data;
                        documentTitleFound = false;
                    }
//                    if (data.contains(".A")) {
//                        documentDescriptionFound = false;
//                        documentDescriptionFirstLineProc = false;
//                        addDoc(w, documentInfo[0], documentInfo[1], documentInfo[2]);
////                        System.out.println(documentInfo[0]);
////                        System.out.println(documentInfo[1]);
////                        System.out.println(documentInfo[2]);
//                    }
                    if (documentDescriptionFound) {
                        documentInfo[2] = data;
                        documentDescriptionFound = false;
                        currentDocumentWork = false;
//                        documentDescriptionFirstLineProc = false;
//                        System.out.println(documentInfo[0]);
//                        System.out.println(documentInfo[1]);
//                        System.out.println(documentInfo[2]);
                        addDoc(w, documentInfo[0], documentInfo[1], documentInfo[2]);
//                        if(documentDescriptionFirstLineProc) {
//                            documentInfo[2] += data;
//                        } else{
//                            documentInfo[2] = data;
//                            documentDescriptionFirstLineProc = true;
//                        }
    //                    documentDescriptionFound = false;
                    }
                    if (data.contains(".U")) {
                        documentIDFound = true;
                    }
                    if (data.contains(".T")) {
                        documentTitleFound = true;
                    }
                    if (data.contains(".W")) {
                        documentDescriptionFound = true;
                    }
                }
                myReader.close();
            } catch (FileNotFoundException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
            }

//        try (IndexWriter w = new IndexWriter(index, config)) {
//        IndexWriter w = new IndexWriter(index, config);
//            addDoc(w, "Lucene in Action", "193398817");
//            addDoc(w, "Lucene for Dummies", "55320055Z");
//            addDoc(w, "Managing Gigabytes", "55063554A");
//            addDoc(w, "The Art of Computer Science", "9900333X");
//            w.close();
        }
        return index;
    }
//    public static final Comparator<String> CASE_INSENSITIVE_ORDER;
    static String ProcessQuery(String query) {
//        String[] splitStr = query.split("[, ]+|\\?+"); // [ ,]+
        query = " " + query + " ";
        query = query.toLowerCase();
        query = query.replaceAll(" and ", " ");
        query = query.replaceAll(" or ", " ");
        query = query.replaceAll(" to ", " ");
        query = query.replaceAll(" with ", " ");
        query = query.replaceAll(" how ", " ");
        query = query.replaceAll(" y ", " ");
        query = query.replaceAll(" yo ", " ");
        query = query.replaceAll(" y/o ", " ");
        query = query.replaceAll(" of ", " ");
        query = query.replaceAll(" for ", " ");
        query = query.replaceAll(" any ", " ");
        query = query.replaceAll(" on ", " ");
        query = query.replaceAll(" year ", " ");
        query = query.replaceAll(" old ", " ");
        query = query.replaceAll(" in ", " ");
        query = query.replaceAll(" s/p ", " ");
        query = query.replaceAll(" in ", " ");
        query = query.replaceAll(" [0-9]+", " ");
        query = query.replaceAll(" are ", " ");
        query = query.replaceAll(" cause ", " ");
        query = query.replaceAll(" associated ", " ");
        query = query.replaceAll(" f ", " ");
        query = query.replaceAll(" is ", " ");
        query = query.replaceAll(" which ", " ");
        query = query.replaceAll(" about ", " ");
        query = query.replaceAll(" have ", " ");
        query = query.replaceAll(" delayed ", " ");
        query = query.replaceAll(" where ", " ");
        query = query.replaceAll(" as ", " ");
        query = query.replaceAll(" while ", " ");
        query = query.replaceAll(" best ", " ");
        query = query.replaceAll(" frequency ", " ");
        query = query.replaceAll(" recommended ", " ");
        query = query.replaceAll(" repeated ", " ");
        query = query.replaceAll(" use ", " ");
        query = query.replaceAll(" after ", " ");
        query = query.replaceAll(" possible ", " ");
        query = query.replaceAll(" up ", " ");
        query = query.replaceAll(" delayed ", " ");
        query = query.replaceAll(" where ", " ");
        query = query.replaceAll(" as ", " ");
        query = query.replaceAll(" while ", " ");
        query = query.replaceAll(" the ", " ");
        query = query.replaceAll(" recent ", " ");
        query = query.replaceAll(",", "");
        query = query.replaceAll(" reviews ", " ");
        query = query.replaceAll(" review ", " ");
        query = query.replaceAll(" breakthrough ", " ");
        query = query.replaceAll(" never ", " ");
        query = query.replaceAll(" whether ", " ");
        query = query.replaceAll(" small ", " ");
        query = query.replaceAll(" general ", " ");
        query = query.replaceAll(" best ", " ");
        query = query.replaceAll(" admission ", " ");
        query = query.replaceAll(" test ", " ");
        query = query.replaceAll(" vs. ", " ");
        query = query.replaceAll(" vs ", " ");
        query = query.replaceAll(" pt ", " ");
        query = query.replaceAll(" uses ", " ");
        query = query.replaceAll(" article ", " ");
        query = query.replaceAll(" when ", " ");
        query = query.replaceAll(" use ", " ");
        query = query.replaceAll(" o ", " ");
        query = query.replaceAll(" w/ ", " ");
        query = query.replaceAll("\\.", "");
        query = query.replaceAll(" w/", " ");
        query = query.replaceAll("\\?", "");

        query = query.replaceAll("  ", " ");

        query = query.trim();
        String[] splitStr = query.split(" ");
        String newQuery = "";
        for (String word : splitStr) {
//            if (!word.equals("and") && !word.equals("or") && !word.equals("the")
//                    && !word.equals("with") && !word.equals("s/p") && !word.equals("With") && !word.equals("yo") && !word.equals("year")
//                    && !word.equals("old") && !word.equals("y") && !word.equals("o") && !word.equals("of")
//                    && !word.equals("on") && !word.equals("YO") && !word.equals("in") && !word.equals("[0-9]+")) {
            newQuery += word + "~ ";
//            }
        }
//        System.out.println(newQuery);
        return newQuery;
    }
    public static void main(String[] args) throws IOException, ParseException {
        StandardAnalyzer analyzer = new StandardAnalyzer();
        Directory index = index(analyzer);
        // customize the analyzer interface such that yo is year old


//        String querystr = args.length > 0 ? args[0] : "lucene";
//        Query q = new QueryParser("title", analyzer).parse();

//        HashMap<String, ArrayList<Integer>> hm = new HashMap<>();
//        // https://www.w3schools.com/java/java_files_read.asp
        try {
            File myObj = new File("/Users/annsophieabrahamsson/Desktop/Grad School 2022-2023/Spring 2023/CSE 272/Assignment1/CSE272_UCSC_Spring/HW1/java/app/src/main/java/com/luence/app/query.ohsu.1-63");
            Scanner myReader = new Scanner(myObj);

//
////            int queryID = 0;
//            boolean titleFound = false;
            boolean descriptionFound = false;
//            boolean idFound = false;
            String processedQuery[] = new String[3];

            File fileObj = new File("log1.txt");
            if (fileObj.createNewFile()) {
                System.out.println("File created: " + fileObj.getName());
            } else {
                System.out.println("File exists already.");
            }
            fileObj = new File("log2.txt");
            if (fileObj.createNewFile()) {
                System.out.println("File created: " + fileObj.getName());
            } else {
                System.out.println("File exists already.");
            }
            fileObj = new File("log3.txt");
            if (fileObj.createNewFile()) {
                System.out.println("File created: " + fileObj.getName());
            } else {
                System.out.println("File exists already.");
            }
            fileObj = new File("log4.txt");
            if (fileObj.createNewFile()) {
                System.out.println("File created: " + fileObj.getName());
            } else {
                System.out.println("File exists already.");
            }
            fileObj = new File("log5.txt");
            if (fileObj.createNewFile()) {
                System.out.println("File created: " + fileObj.getName());
            } else {
                System.out.println("File exists already.");
            }

            FileWriter file1 = new FileWriter("log1.txt");
            FileWriter file2 = new FileWriter("log2.txt");
            FileWriter file3 = new FileWriter("log3.txt");
            FileWriter file4 = new FileWriter("log4.txt");
            FileWriter file5 = new FileWriter("log5.txt");

            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();

//                if (idFound) {
//                    System.out.println("ID: ");
//                    processedQuery[0] = data;
//                }
//                if (titleFound) {
//                    System.out.println("Title: ");
//                    processedQuery[1] = ProcessQuery(data);
//                }
                if (descriptionFound) {
//                    System.out.println("Description: ");
                    processedQuery[2] = ProcessQuery(data);
                    descriptionFound = false;
                    String finalString = processedQuery[2] + " " + processedQuery[1];
//                    System.out.println(finalString);
                    // add the query to the parser here
//                    Query q = new QueryParser("title", analyzer).parse(QueryParser.escape(finalString));
                    QueryParser q = new QueryParser("<default field>", analyzer);
                    String fields = "title:" + finalString + " OR description:" + finalString;
//                    System.out.println(fields);

                    int hitsPerPage = 50;

                    IndexReader reader = DirectoryReader.open(index);
                    IndexSearcher searcher = new IndexSearcher(reader);

                    String ranktype = "";
                    for (int rankingAlg = 0; rankingAlg < 5; rankingAlg++) {
                        if (rankingAlg == 0) {
                            searcher.setSimilarity(new BM25Similarity());
                            ranktype = "BM25Similarity";
                        }
                        if (rankingAlg == 1) {
                            searcher.setSimilarity(new BooleanSimilarity());
                            ranktype = "BooleanSimilarity";
                        }
                        if (rankingAlg == 2) {
                            searcher.setSimilarity(new ClassicSimilarity());
                            ranktype = "TFIDFSimilarity";
                        }
                        if (rankingAlg == 3) {
                            searcher.setSimilarity(new TFIDFSimilarity() {
                                @Override
                                public float tf(float freq) {
                                    return (float) Math.sqrt(freq);
                                }

                                @Override
                                public float idf(long docFreq, long docCount) {
                                    return 1;
                                }

                                @Override
                                public float lengthNorm(int length) {
                                    return (1/((float) Math.sqrt(length)));
                                }
                            });
                            ranktype = "TFSimilarity";
                        }
                        if (rankingAlg == 4) {
                            searcher.setSimilarity(new TFIDFSimilarity() {
                                @Override
                                public float tf(float freq) {
                                    return 1;
                                }

                                @Override
                                public float idf(long docFreq, long docCount) {
                                    return (1/((float) Math.log(docCount/ docFreq)));
                                }

                                @Override
                                public float lengthNorm(int length) {
                                    return (1/((float) Math.sqrt(length)));
                                }
                            });
                            ranktype = "MySimilarity";
                        }

                        TopDocs docs = searcher.search(q.parse(fields), hitsPerPage);
                        ScoreDoc[] hits = docs.scoreDocs;


                        System.out.println("Found " + hits.length + " hits.");
                        for (int i = 0; i < hits.length; ++i) {
                            int docId = hits[i].doc;
                            Document d = searcher.getIndexReader().document(docId);
                            System.out.println((i + 1) + ". " + d.get("doc id") + " " + d.get("title") + "\t" + d.get("description"));

                            System.out.println((i + 1) + ". " + d.get("title") + hits[i].score);
                            if (ranktype.equals("BM25Similarity")) {
                                file1.write(processedQuery[0] + " Q0 " + d.get("doc id") + " " + (i + 1) + " " + hits[i].score + " " + ranktype + "\n");
                            }
                            if (ranktype.equals("BooleanSimilarity")) {
                                file2.write(processedQuery[0] + " Q0 " + d.get("doc id") + " " + + (i + 1) + " " + hits[i].score + " " + ranktype + "\n");
                            }
                            if (ranktype.equals("TFIDFSimilarity")) {
                                file3.write(processedQuery[0] + " Q0 " + d.get("doc id") + " " + + (i + 1) + " " + hits[i].score + " " + ranktype + "\n");
                            }
                            if (ranktype.equals("TFSimilarity")) {
                                file4.write(processedQuery[0] + " Q0 " + d.get("doc id") + " " + + (i + 1) + " " + hits[i].score + " " + ranktype + "\n");
                            }
                            if (ranktype.equals("MySimilarity")) {
                                file5.write(processedQuery[0] + " Q0 " + d.get("doc id") + " " + + (i + 1) + " " + hits[i].score + " " + ranktype + "\n");
                            }
                        }
                    }


                }
                if (data.contains("<num>")) {
//                    idFound = true;
                    String[] splitStr = data.split(" ");
                    processedQuery[0] = splitStr[2];
//                    System.out.println("ID: " + processedQuery[0]);
//                    System.out.println(processedQuery[0]);
                }
                if (data.contains("<title>")) {
//                    titleFound = true;
//                    String[] splitStr = data.split(" ");
//                    processedQuery[1] = splitStr[1];
                    String dataMod = data.replaceAll("<title> ", "");
//                    System.out.println("Title: ");
                    processedQuery[1] = ProcessQuery(dataMod);
//                    System.out.println("Title: " + dataMod);
//                    processedQuery[1] = data;
//                    processedQuery[1] = ProcessQuery(data);
//                    System.out.println("Title: " + processedQuery[1]);
//                    System.out.println(processedQuery[1]);
                }

                if (data.contains("<desc>")) {
                    descriptionFound = true;
                }

//                String[] splitStr = data.split("[, ]+|\\?+"); // [ ,]+
//                String queryID[] = new String[]; // for string query ID
//
//                for (String i: splitStr) {
////                    System.out.println(i);
//                    // get the query ID
//                    if (data.contains("<num>")) {
////                        System.out.println("HELLO");
////                        queryID[0] = splitStr[2]; // for string query ID
////                        queryID += 1;
////                        System.out.println(queryID);
//                    }
////                    // taking the tokens from the description and title and adding them to the inverted list
////                    if (!i.equals("<num>") && !i.equals("Number:") && !i.equals("Description:") && !i.equals("<title>") && !i.equals("<desc>")
////                            && !i.equals("<top>") && !i.equals("</top>")) {
////                        if (!splitStr[0].equals("<num>")) {
//////                            System.out.println(i);
//////                            hm.put(i, queryID);
////                            if (hm.get(i) == null) {
////                                hm.put(i, new ArrayList<>());
////                            }
////                            hm.get(i).add(queryID);
////                        }
////                    }
////                }
//////                queryID += 1;
            }
            file1.close();
            file2.close();
            file3.close();
            file4.close();
            file5.close();
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }

//        System.out.println("NUM DOCS: " + documents);
//        for (Map.Entry<String, ArrayList<Integer>> me : hm.entrySet()) {
//
//            // Printing keys
//            String key = me.getKey();
//            ArrayList<Integer> values = me.getValue();
//            System.out.print(key + ":");
//            System.out.println(values);
//        }
        // for each line in the file
        // if the first word is <num> then get the number ID from that line and set that as the current ID
        // if the first word is <title> or <description> then tokenize each word following it until we read a "<"
        // for each word, check if the word is in the inverted list, if it is then we add the current ID to that word,
        // if not then we add the word to that inverted list with the current ID
        // stemming





    }
}
